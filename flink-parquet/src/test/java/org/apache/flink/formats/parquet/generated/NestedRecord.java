/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.formats.parquet.generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NestedRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6280563285893134835L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NestedRecord\",\"namespace\":\"org.apache.flink.formats.parquet.generated\",\"fields\":[{\"name\":\"foo\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"spamMap\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"default\":null},{\"name\":\"bar\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Bar\",\"fields\":[{\"name\":\"spam\",\"type\":[\"null\",\"long\"],\"default\":null}]}],\"default\":null},{\"name\":\"arr\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"long\"}],\"default\":null},{\"name\":\"strArray\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"nestedMap\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"MapItem\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"name\":\"value\",\"type\":[\"null\",\"string\"]}]}}],\"default\":null},{\"name\":\"nestedArray\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ArrayItem\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"long\"}]}}],\"default\":null}],\"schema_id\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NestedRecord> ENCODER =
      new BinaryMessageEncoder<NestedRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NestedRecord> DECODER =
      new BinaryMessageDecoder<NestedRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<NestedRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<NestedRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NestedRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this NestedRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a NestedRecord from a ByteBuffer. */
  public static NestedRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long foo;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> spamMap;
  @Deprecated public org.apache.flink.formats.parquet.generated.Bar bar;
  @Deprecated public java.util.List<java.lang.Long> arr;
  @Deprecated public java.util.List<java.lang.CharSequence> strArray;
  @Deprecated public java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem> nestedMap;
  @Deprecated public java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem> nestedArray;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NestedRecord() {}

  /**
   * All-args constructor.
   * @param foo The new value for foo
   * @param spamMap The new value for spamMap
   * @param bar The new value for bar
   * @param arr The new value for arr
   * @param strArray The new value for strArray
   * @param nestedMap The new value for nestedMap
   * @param nestedArray The new value for nestedArray
   */
  public NestedRecord(java.lang.Long foo, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> spamMap, org.apache.flink.formats.parquet.generated.Bar bar, java.util.List<java.lang.Long> arr, java.util.List<java.lang.CharSequence> strArray, java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem> nestedMap, java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem> nestedArray) {
    this.foo = foo;
    this.spamMap = spamMap;
    this.bar = bar;
    this.arr = arr;
    this.strArray = strArray;
    this.nestedMap = nestedMap;
    this.nestedArray = nestedArray;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return foo;
    case 1: return spamMap;
    case 2: return bar;
    case 3: return arr;
    case 4: return strArray;
    case 5: return nestedMap;
    case 6: return nestedArray;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: foo = (java.lang.Long)value$; break;
    case 1: spamMap = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 2: bar = (org.apache.flink.formats.parquet.generated.Bar)value$; break;
    case 3: arr = (java.util.List<java.lang.Long>)value$; break;
    case 4: strArray = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: nestedMap = (java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem>)value$; break;
    case 6: nestedArray = (java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'foo' field.
   * @return The value of the 'foo' field.
   */
  public java.lang.Long getFoo() {
    return foo;
  }

  /**
   * Sets the value of the 'foo' field.
   * @param value the value to set.
   */
  public void setFoo(java.lang.Long value) {
    this.foo = value;
  }

  /**
   * Gets the value of the 'spamMap' field.
   * @return The value of the 'spamMap' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getSpamMap() {
    return spamMap;
  }

  /**
   * Sets the value of the 'spamMap' field.
   * @param value the value to set.
   */
  public void setSpamMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.spamMap = value;
  }

  /**
   * Gets the value of the 'bar' field.
   * @return The value of the 'bar' field.
   */
  public org.apache.flink.formats.parquet.generated.Bar getBar() {
    return bar;
  }

  /**
   * Sets the value of the 'bar' field.
   * @param value the value to set.
   */
  public void setBar(org.apache.flink.formats.parquet.generated.Bar value) {
    this.bar = value;
  }

  /**
   * Gets the value of the 'arr' field.
   * @return The value of the 'arr' field.
   */
  public java.util.List<java.lang.Long> getArr() {
    return arr;
  }

  /**
   * Sets the value of the 'arr' field.
   * @param value the value to set.
   */
  public void setArr(java.util.List<java.lang.Long> value) {
    this.arr = value;
  }

  /**
   * Gets the value of the 'strArray' field.
   * @return The value of the 'strArray' field.
   */
  public java.util.List<java.lang.CharSequence> getStrArray() {
    return strArray;
  }

  /**
   * Sets the value of the 'strArray' field.
   * @param value the value to set.
   */
  public void setStrArray(java.util.List<java.lang.CharSequence> value) {
    this.strArray = value;
  }

  /**
   * Gets the value of the 'nestedMap' field.
   * @return The value of the 'nestedMap' field.
   */
  public java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem> getNestedMap() {
    return nestedMap;
  }

  /**
   * Sets the value of the 'nestedMap' field.
   * @param value the value to set.
   */
  public void setNestedMap(java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem> value) {
    this.nestedMap = value;
  }

  /**
   * Gets the value of the 'nestedArray' field.
   * @return The value of the 'nestedArray' field.
   */
  public java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem> getNestedArray() {
    return nestedArray;
  }

  /**
   * Sets the value of the 'nestedArray' field.
   * @param value the value to set.
   */
  public void setNestedArray(java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem> value) {
    this.nestedArray = value;
  }

  /**
   * Creates a new NestedRecord RecordBuilder.
   * @return A new NestedRecord RecordBuilder
   */
  public static org.apache.flink.formats.parquet.generated.NestedRecord.Builder newBuilder() {
    return new org.apache.flink.formats.parquet.generated.NestedRecord.Builder();
  }

  /**
   * Creates a new NestedRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NestedRecord RecordBuilder
   */
  public static org.apache.flink.formats.parquet.generated.NestedRecord.Builder newBuilder(org.apache.flink.formats.parquet.generated.NestedRecord.Builder other) {
    return new org.apache.flink.formats.parquet.generated.NestedRecord.Builder(other);
  }

  /**
   * Creates a new NestedRecord RecordBuilder by copying an existing NestedRecord instance.
   * @param other The existing instance to copy.
   * @return A new NestedRecord RecordBuilder
   */
  public static org.apache.flink.formats.parquet.generated.NestedRecord.Builder newBuilder(org.apache.flink.formats.parquet.generated.NestedRecord other) {
    return new org.apache.flink.formats.parquet.generated.NestedRecord.Builder(other);
  }

  /**
   * RecordBuilder for NestedRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NestedRecord>
    implements org.apache.avro.data.RecordBuilder<NestedRecord> {

    private java.lang.Long foo;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> spamMap;
    private org.apache.flink.formats.parquet.generated.Bar bar;
    private org.apache.flink.formats.parquet.generated.Bar.Builder barBuilder;
    private java.util.List<java.lang.Long> arr;
    private java.util.List<java.lang.CharSequence> strArray;
    private java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem> nestedMap;
    private java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem> nestedArray;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.formats.parquet.generated.NestedRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.foo)) {
        this.foo = data().deepCopy(fields()[0].schema(), other.foo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.spamMap)) {
        this.spamMap = data().deepCopy(fields()[1].schema(), other.spamMap);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bar)) {
        this.bar = data().deepCopy(fields()[2].schema(), other.bar);
        fieldSetFlags()[2] = true;
      }
      if (other.hasBarBuilder()) {
        this.barBuilder = org.apache.flink.formats.parquet.generated.Bar.newBuilder(other.getBarBuilder());
      }
      if (isValidValue(fields()[3], other.arr)) {
        this.arr = data().deepCopy(fields()[3].schema(), other.arr);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.strArray)) {
        this.strArray = data().deepCopy(fields()[4].schema(), other.strArray);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nestedMap)) {
        this.nestedMap = data().deepCopy(fields()[5].schema(), other.nestedMap);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nestedArray)) {
        this.nestedArray = data().deepCopy(fields()[6].schema(), other.nestedArray);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NestedRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.formats.parquet.generated.NestedRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.foo)) {
        this.foo = data().deepCopy(fields()[0].schema(), other.foo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.spamMap)) {
        this.spamMap = data().deepCopy(fields()[1].schema(), other.spamMap);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bar)) {
        this.bar = data().deepCopy(fields()[2].schema(), other.bar);
        fieldSetFlags()[2] = true;
      }
      this.barBuilder = null;
      if (isValidValue(fields()[3], other.arr)) {
        this.arr = data().deepCopy(fields()[3].schema(), other.arr);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.strArray)) {
        this.strArray = data().deepCopy(fields()[4].schema(), other.strArray);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nestedMap)) {
        this.nestedMap = data().deepCopy(fields()[5].schema(), other.nestedMap);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nestedArray)) {
        this.nestedArray = data().deepCopy(fields()[6].schema(), other.nestedArray);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'foo' field.
      * @return The value.
      */
    public java.lang.Long getFoo() {
      return foo;
    }

    /**
      * Sets the value of the 'foo' field.
      * @param value The value of 'foo'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setFoo(java.lang.Long value) {
      validate(fields()[0], value);
      this.foo = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'foo' field has been set.
      * @return True if the 'foo' field has been set, false otherwise.
      */
    public boolean hasFoo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'foo' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder clearFoo() {
      foo = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'spamMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getSpamMap() {
      return spamMap;
    }

    /**
      * Sets the value of the 'spamMap' field.
      * @param value The value of 'spamMap'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setSpamMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.spamMap = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'spamMap' field has been set.
      * @return True if the 'spamMap' field has been set, false otherwise.
      */
    public boolean hasSpamMap() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'spamMap' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder clearSpamMap() {
      spamMap = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bar' field.
      * @return The value.
      */
    public org.apache.flink.formats.parquet.generated.Bar getBar() {
      return bar;
    }

    /**
      * Sets the value of the 'bar' field.
      * @param value The value of 'bar'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setBar(org.apache.flink.formats.parquet.generated.Bar value) {
      validate(fields()[2], value);
      this.barBuilder = null;
      this.bar = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bar' field has been set.
      * @return True if the 'bar' field has been set, false otherwise.
      */
    public boolean hasBar() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'bar' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.flink.formats.parquet.generated.Bar.Builder getBarBuilder() {
      if (barBuilder == null) {
        if (hasBar()) {
          setBarBuilder(org.apache.flink.formats.parquet.generated.Bar.newBuilder(bar));
        } else {
          setBarBuilder(org.apache.flink.formats.parquet.generated.Bar.newBuilder());
        }
      }
      return barBuilder;
    }

    /**
     * Sets the Builder instance for the 'bar' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setBarBuilder(org.apache.flink.formats.parquet.generated.Bar.Builder value) {
      clearBar();
      barBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bar' field has an active Builder instance
     * @return True if the 'bar' field has an active Builder instance
     */
    public boolean hasBarBuilder() {
      return barBuilder != null;
    }

    /**
      * Clears the value of the 'bar' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder clearBar() {
      bar = null;
      barBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'arr' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getArr() {
      return arr;
    }

    /**
      * Sets the value of the 'arr' field.
      * @param value The value of 'arr'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setArr(java.util.List<java.lang.Long> value) {
      validate(fields()[3], value);
      this.arr = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'arr' field has been set.
      * @return True if the 'arr' field has been set, false otherwise.
      */
    public boolean hasArr() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'arr' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder clearArr() {
      arr = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'strArray' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getStrArray() {
      return strArray;
    }

    /**
      * Sets the value of the 'strArray' field.
      * @param value The value of 'strArray'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setStrArray(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.strArray = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'strArray' field has been set.
      * @return True if the 'strArray' field has been set, false otherwise.
      */
    public boolean hasStrArray() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'strArray' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder clearStrArray() {
      strArray = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'nestedMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem> getNestedMap() {
      return nestedMap;
    }

    /**
      * Sets the value of the 'nestedMap' field.
      * @param value The value of 'nestedMap'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setNestedMap(java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem> value) {
      validate(fields()[5], value);
      this.nestedMap = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'nestedMap' field has been set.
      * @return True if the 'nestedMap' field has been set, false otherwise.
      */
    public boolean hasNestedMap() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'nestedMap' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder clearNestedMap() {
      nestedMap = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'nestedArray' field.
      * @return The value.
      */
    public java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem> getNestedArray() {
      return nestedArray;
    }

    /**
      * Sets the value of the 'nestedArray' field.
      * @param value The value of 'nestedArray'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder setNestedArray(java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem> value) {
      validate(fields()[6], value);
      this.nestedArray = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'nestedArray' field has been set.
      * @return True if the 'nestedArray' field has been set, false otherwise.
      */
    public boolean hasNestedArray() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'nestedArray' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.NestedRecord.Builder clearNestedArray() {
      nestedArray = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NestedRecord build() {
      try {
        NestedRecord record = new NestedRecord();
        record.foo = fieldSetFlags()[0] ? this.foo : (java.lang.Long) defaultValue(fields()[0]);
        record.spamMap = fieldSetFlags()[1] ? this.spamMap : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[1]);
        if (barBuilder != null) {
          record.bar = this.barBuilder.build();
        } else {
          record.bar = fieldSetFlags()[2] ? this.bar : (org.apache.flink.formats.parquet.generated.Bar) defaultValue(fields()[2]);
        }
        record.arr = fieldSetFlags()[3] ? this.arr : (java.util.List<java.lang.Long>) defaultValue(fields()[3]);
        record.strArray = fieldSetFlags()[4] ? this.strArray : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.nestedMap = fieldSetFlags()[5] ? this.nestedMap : (java.util.Map<java.lang.CharSequence,org.apache.flink.formats.parquet.generated.MapItem>) defaultValue(fields()[5]);
        record.nestedArray = fieldSetFlags()[6] ? this.nestedArray : (java.util.List<org.apache.flink.formats.parquet.generated.ArrayItem>) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NestedRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<NestedRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NestedRecord>
    READER$ = (org.apache.avro.io.DatumReader<NestedRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
