/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.formats.parquet.generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SimpleRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6587201329523714120L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SimpleRecord\",\"namespace\":\"org.apache.flink.formats.parquet.generated\",\"fields\":[{\"name\":\"foo\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"bar\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"arr\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"long\"}],\"default\":null}],\"schema_id\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SimpleRecord> ENCODER =
      new BinaryMessageEncoder<SimpleRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SimpleRecord> DECODER =
      new BinaryMessageDecoder<SimpleRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SimpleRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SimpleRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SimpleRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SimpleRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SimpleRecord from a ByteBuffer. */
  public static SimpleRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long foo;
  @Deprecated public java.lang.CharSequence bar;
  @Deprecated public java.util.List<java.lang.Long> arr;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SimpleRecord() {}

  /**
   * All-args constructor.
   * @param foo The new value for foo
   * @param bar The new value for bar
   * @param arr The new value for arr
   */
  public SimpleRecord(java.lang.Long foo, java.lang.CharSequence bar, java.util.List<java.lang.Long> arr) {
    this.foo = foo;
    this.bar = bar;
    this.arr = arr;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return foo;
    case 1: return bar;
    case 2: return arr;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: foo = (java.lang.Long)value$; break;
    case 1: bar = (java.lang.CharSequence)value$; break;
    case 2: arr = (java.util.List<java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'foo' field.
   * @return The value of the 'foo' field.
   */
  public java.lang.Long getFoo() {
    return foo;
  }

  /**
   * Sets the value of the 'foo' field.
   * @param value the value to set.
   */
  public void setFoo(java.lang.Long value) {
    this.foo = value;
  }

  /**
   * Gets the value of the 'bar' field.
   * @return The value of the 'bar' field.
   */
  public java.lang.CharSequence getBar() {
    return bar;
  }

  /**
   * Sets the value of the 'bar' field.
   * @param value the value to set.
   */
  public void setBar(java.lang.CharSequence value) {
    this.bar = value;
  }

  /**
   * Gets the value of the 'arr' field.
   * @return The value of the 'arr' field.
   */
  public java.util.List<java.lang.Long> getArr() {
    return arr;
  }

  /**
   * Sets the value of the 'arr' field.
   * @param value the value to set.
   */
  public void setArr(java.util.List<java.lang.Long> value) {
    this.arr = value;
  }

  /**
   * Creates a new SimpleRecord RecordBuilder.
   * @return A new SimpleRecord RecordBuilder
   */
  public static org.apache.flink.formats.parquet.generated.SimpleRecord.Builder newBuilder() {
    return new org.apache.flink.formats.parquet.generated.SimpleRecord.Builder();
  }

  /**
   * Creates a new SimpleRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SimpleRecord RecordBuilder
   */
  public static org.apache.flink.formats.parquet.generated.SimpleRecord.Builder newBuilder(org.apache.flink.formats.parquet.generated.SimpleRecord.Builder other) {
    return new org.apache.flink.formats.parquet.generated.SimpleRecord.Builder(other);
  }

  /**
   * Creates a new SimpleRecord RecordBuilder by copying an existing SimpleRecord instance.
   * @param other The existing instance to copy.
   * @return A new SimpleRecord RecordBuilder
   */
  public static org.apache.flink.formats.parquet.generated.SimpleRecord.Builder newBuilder(org.apache.flink.formats.parquet.generated.SimpleRecord other) {
    return new org.apache.flink.formats.parquet.generated.SimpleRecord.Builder(other);
  }

  /**
   * RecordBuilder for SimpleRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SimpleRecord>
    implements org.apache.avro.data.RecordBuilder<SimpleRecord> {

    private java.lang.Long foo;
    private java.lang.CharSequence bar;
    private java.util.List<java.lang.Long> arr;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.formats.parquet.generated.SimpleRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.foo)) {
        this.foo = data().deepCopy(fields()[0].schema(), other.foo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bar)) {
        this.bar = data().deepCopy(fields()[1].schema(), other.bar);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.arr)) {
        this.arr = data().deepCopy(fields()[2].schema(), other.arr);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SimpleRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.formats.parquet.generated.SimpleRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.foo)) {
        this.foo = data().deepCopy(fields()[0].schema(), other.foo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bar)) {
        this.bar = data().deepCopy(fields()[1].schema(), other.bar);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.arr)) {
        this.arr = data().deepCopy(fields()[2].schema(), other.arr);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'foo' field.
      * @return The value.
      */
    public java.lang.Long getFoo() {
      return foo;
    }

    /**
      * Sets the value of the 'foo' field.
      * @param value The value of 'foo'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.SimpleRecord.Builder setFoo(java.lang.Long value) {
      validate(fields()[0], value);
      this.foo = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'foo' field has been set.
      * @return True if the 'foo' field has been set, false otherwise.
      */
    public boolean hasFoo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'foo' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.SimpleRecord.Builder clearFoo() {
      foo = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bar' field.
      * @return The value.
      */
    public java.lang.CharSequence getBar() {
      return bar;
    }

    /**
      * Sets the value of the 'bar' field.
      * @param value The value of 'bar'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.SimpleRecord.Builder setBar(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.bar = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bar' field has been set.
      * @return True if the 'bar' field has been set, false otherwise.
      */
    public boolean hasBar() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bar' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.SimpleRecord.Builder clearBar() {
      bar = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'arr' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getArr() {
      return arr;
    }

    /**
      * Sets the value of the 'arr' field.
      * @param value The value of 'arr'.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.SimpleRecord.Builder setArr(java.util.List<java.lang.Long> value) {
      validate(fields()[2], value);
      this.arr = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'arr' field has been set.
      * @return True if the 'arr' field has been set, false otherwise.
      */
    public boolean hasArr() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'arr' field.
      * @return This builder.
      */
    public org.apache.flink.formats.parquet.generated.SimpleRecord.Builder clearArr() {
      arr = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SimpleRecord build() {
      try {
        SimpleRecord record = new SimpleRecord();
        record.foo = fieldSetFlags()[0] ? this.foo : (java.lang.Long) defaultValue(fields()[0]);
        record.bar = fieldSetFlags()[1] ? this.bar : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.arr = fieldSetFlags()[2] ? this.arr : (java.util.List<java.lang.Long>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SimpleRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<SimpleRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SimpleRecord>
    READER$ = (org.apache.avro.io.DatumReader<SimpleRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
